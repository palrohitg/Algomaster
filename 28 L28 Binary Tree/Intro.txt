// Theory and the compelxity analysis vs tradeoff between different data-structure

Binary Tree : 
    Hierachical Data structure unlike the stack and queue 
    Example directory structure, company organizations 
    Application : real world, directory structure : 



Traversal : To Print the nodes of the binary tree : 

-> Inorder(left,root,right), Preorder(root, left, right), PostOrders (left, right, root) 0(N) visting each nodes 
-> level order traversal : print all the elements level by levels

# Level Order traversal : 
-> height of the tree 
-> Print all the level till the height of the tree 

/*Function to print level order traversal of tree*/
printLevelorder(tree)
for d = 1 to height(tree)
   printGivenLevel(tree, d);

/*Function to print all nodes at a given level*/
printGivenLevel(tree, level)
if tree is NULL then return;
if level is 1, then
    print(tree->data);
else if level greater than 1, then
    printGivenLevel(tree->left, level-1);
    printGivenLevel(tree->right, level-1);









Terms : 
1. Siblings : child of the same parents 
2. Ancestors : All the parent node 
3. Decendent : All all child node 
4. Leaf : not have not children 


Different View of the tree : 
1. top little variations 
2. bottom 
3. left 
4. right 


# Some Importants theory Concepts : ()
1. Diameter of the tree 
2. Sum replacements 
3. Height Balanced Tree AVL trees 
4. Build tree from arrays 
5. PreOrder and PostOrder builds 
6. Right View of the tree 
7. Shorest distances between two nodes
8. longest common Ancestors


